--run the alter command in sqlplus.
alter session set NLS_DATE_FORMAT='yyyy/mm/dd:hh:mi:ssam';

spool on;
select sysdate from dual;

INSERT INTO PRIMARY_DS_TYPES ( PRIMARY_DS_TYPE_ID,  PRIMARY_DS_TYPE) SELECT ID, TYPE FROM CMS_DBS3_PROD.PRIMARYDSTYPE;
commit;
select 'Done insert PRIMARY_DS_TYPES' from dual;
select sysdate from dual;

INSERT INTO PRIMARY_DATASETS(PRIMARY_DS_ID, PRIMARY_DS_NAME, PRIMARY_DS_TYPE_ID, CREATION_DATE, CREATE_BY)  
SELECT PD.ID, PD.NAME, PD.TYPE, PD.CREATIONDATE, PS.DISTINGUISHEDNAME 
FROM CMS_DBS3_PROD.PRIMARYDATASET PD join CMS_DBS3_PROD.PERSON PS ON  PS.ID=PD.CREATEDBY;
commit;
select 'Done insert PRIMARY_DATASETS' from dual;
select sysdate from dual;

INSERT INTO APPLICATION_EXECUTABLES (APP_EXEC_ID, APP_NAME) SELECT ID, EXECUTABLENAME FROM CMS_DBS3_PROD.APPEXECUTABLE;
INSERT INTO RELEASE_VERSIONS ( RELEASE_VERSION_ID, RELEASE_VERSION ) SELECT ID, VERSION FROM CMS_DBS3_PROD.APPVERSION;
INSERT INTO PARAMETER_SET_HASHES ( PARAMETER_SET_HASH_ID, PSET_HASH, NAME ) SELECT ID, HASH, NAME FROM CMS_DBS3_PROD.QUERYABLEPARAMETERSET;
--FAKING APPLICATIONFAMILY AS OUTPUT_MODULE_LABEL, THIS KEEPS THE UNIQUENESS
INSERT INTO OUTPUT_MODULE_CONFIGS ( OUTPUT_MOD_CONFIG_ID, APP_EXEC_ID, RELEASE_VERSION_ID, PARAMETER_SET_HASH_ID, 
                                    OUTPUT_MODULE_LABEL, GLOBAL_TAG, CREATION_DATE, CREATE_BY) 
SELECT AL.ID, AL.EXECUTABLENAME, AL.APPLICATIONVERSION, AL.PARAMETERSETID, AL.APPLICATIONFAMILY, 'UNKNOWN', AL.CREATIONDATE, PS.DISTINGUISHEDNAME  
FROM CMS_DBS3_PROD.ALGORITHMCONFIG AL JOIN CMS_DBS3_PROD.PERSON PS on PS.ID=AL.CREATEDBY;
commit;
select 'Done insert OUTPUT_MODULE_CONFIGS' from dual;
select sysdate from dual;


INSERT INTO PHYSICS_GROUPS ( PHYSICS_GROUP_ID, PHYSICS_GROUP_NAME) SELECT ID, PHYSICSGROUPNAME FROM CMS_DBS3_PROD.PHYSICSGROUP;

--WE WILL USE THE STATUS (FROM DBS-2) TO FILL IN TYPE IN DBS-3, LATER WE CAN FIX THIS
INSERT INTO DATASET_ACCESS_TYPES (DATASET_ACCESS_TYPE_ID, DATASET_ACCESS_TYPE) SELECT ID, STATUS FROM CMS_DBS3_PROD.PROCDSSTATUS;

--ADD a new type "UNKOWN_DBS2_TYPE" with ID=100 to map the VALID and INVALID datasets in DBS2
INSERT INTO DATASET_ACCESS_TYPES (DATASET_ACCESS_TYPE_ID, DATASET_ACCESS_TYPE) values(100, 'UNKNOWN_DBS2_TYPE');

INSERT INTO DATA_TIERS ( DATA_TIER_ID, DATA_TIER_NAME,CREATION_DATE, CREATE_BY ) SELECT DT.ID, DT.NAME, DT.CREATIONDATE, PS.DISTINGUISHEDNAME
FROM CMS_DBS3_PROD.DATATIER DT join CMS_DBS3_PROD.PERSON PS ON  PS.ID=DT.CREATEDBY
;
INSERT INTO ACQUISITION_ERAS ( ACQUISITION_ERA_NAME ) SELECT DISTINCT AQUISITIONERA FROM CMS_DBS3_PROD.PROCESSEDDATASET where AQUISITIONERA IS NOT NULL;

INSERT INTO PROCESSED_DATASETS ( PROCESSED_DS_NAME ) SELECT DISTINCT NAME FROM CMS_DBS3_PROD.PROCESSEDDATASET;
commit;
select 'Done insert PROCESSED_DATASETS ' from dual;
select sysdate from dual;

--INSERT ALL DATASETS AS INVALID (IS_DATASET_VALID==0) and DATASET_ACCESS_TYPE="UNKNOWN_DBS2_TYPE" (DATASET_ACCESS_TYPE_ID=100)

INSERT INTO DATASETS (
	 DATASET_ID,                               
	  DATASET,
	   IS_DATASET_VALID,                         
	    PRIMARY_DS_ID,                            
	     PROCESSED_DS_ID,                          
	      DATA_TIER_ID,          
	       DATASET_ACCESS_TYPE_ID,      
	        ACQUISITION_ERA_ID,
		 PHYSICS_GROUP_ID,
		  XTCROSSSECTION,
		    CREATION_DATE,
		     CREATE_BY,
		      LAST_MODIFICATION_DATE,
		       LAST_MODIFIED_BY
	)
SELECT DS.ID, '/' || P.NAME || '/' || DS.NAME || '/' || DT.NAME, 0, P.ID, PDS.PROCESSED_DS_ID, DT.ID, 100,
       ACQ.ACQUISITION_ERA_ID, DS.PHYSICSGROUP, DS.XTCROSSSECTION,
       DS.CREATIONDATE, PDCB.DISTINGUISHEDNAME, DS.LASTMODIFICATIONDATE, PDLM.DISTINGUISHEDNAME
       FROM CMS_DBS3_PROD.PROCESSEDDATASET DS
       JOIN CMS_DBS3_PROD.PRIMARYDATASET P
           ON P.ID=DS.PRIMARYDATASET
	   JOIN CMS_DBS3_PROD.DATATIER DT
	       ON DT.ID=DS.DATATIER
	       JOIN PROCESSED_DATASETS PDS
	           ON PDS.PROCESSED_DS_NAME=DS.NAME
		   LEFT OUTER JOIN ACQUISITION_ERAS ACQ
		       ON ACQ.ACQUISITION_ERA_NAME=DS.AQUISITIONERA
		       LEFT OUTER JOIN PHYSICS_GROUPS PG
		           ON DS.PHYSICSGROUP=PG.PHYSICS_GROUP_ID
			   LEFT OUTER JOIN CMS_DBS3_PROD.PERSON PDCB
			       ON DS.CREATEDBY=PDCB.ID
			       LEFT OUTER JOIN CMS_DBS3_PROD.PERSON PDLM
			           ON DS.LASTMODIFIEDBY=PDLM.ID;   

commit;
select 'Done insert DATASET' from dual;
select sysdate from dual;

--There are no single dataset labeled as VALIDRO in DBS2 althrough VALIDRO is in the processeddsstatus.
--SET THE STATUS OF DATASETS AS VALID, IF THEY ARE MARKED AS 'VALID', 'RO', 'PRODUCTION','IMPORTED' or 'EXPORTED' IN DBS-2
UPDATE DATASETS DS SET DS.IS_DATASET_VALID=1 WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM CMS_DBS3_PROD.PROCESSEDDATASET PDS, CMS_DBS3_PROD.PROCDSSTATUS ST
WHERE ST.ID=PDS.STATUS AND ST.STATUS in ('VALID', 'RO', 'PRODUCTION', 'IMPORTED', 'EXPORTED'));
--SET THE TYPE OF DATASETS BASED ON "STATUS" IN DBS-2, But for the dataset with 'VALID' status in DBS2, Not sure what we should set its dataset access type in dbs3 
UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='PRODUCTION') 
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM CMS_DBS3_PROD.PROCESSEDDATASET PDS, CMS_DBS3_PROD.PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND ST.STATUS='PRODUCTION');

UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='DELETED') 
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM CMS_DBS3_PROD.PROCESSEDDATASET PDS, CMS_DBS3_PROD.PROCDSSTATUS ST WHERE ST.ID =PDS.STATUS AND ST.STATUS='DELETED');

UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='DEPRECATED') 
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM CMS_DBS3_PROD.PROCESSEDDATASET PDS, CMS_DBS3_PROD.PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND ST.STATUS='DEPRECATED');

UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='RO')
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM CMS_DBS3_PROD.PROCESSEDDATASET PDS, CMS_DBS3_PROD.PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND
ST.STATUS='RO');

UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='EXPORTED')
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM CMS_DBS3_PROD.PROCESSEDDATASET PDS, CMS_DBS3_PROD.PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND
ST.STATUS='EXPORTED');

UPDATE DATASETS DS SET DS.DATASET_ACCESS_TYPE_ID=(SELECT DATASET_ACCESS_TYPE_ID FROM DATASET_ACCESS_TYPES WHERE DATASET_ACCESS_TYPE='IMPORTED')
WHERE DS.DATASET_ID IN (SELECT PDS.ID FROM CMS_DBS3_PROD.PROCESSEDDATASET PDS, CMS_DBS3_PROD.PROCDSSTATUS ST WHERE ST.ID=PDS.STATUS AND
ST.STATUS='IMPORTED');

commit;

--set dataset_access_type='UNKNOWN_DBS2_TYPE' for datasets with status='VALID' or 'INVALID' in dbs2
--update dataset_access_types set dataset_access_type='UNKNOWN_DBS2_TYPE' where dataset_access_type='VALID';
--commit;
--remove wrong types.
delete from dataset_access_types where dataset_access_type='VALID-RO';
delete from dataset_access_types where dataset_access_type='VALID';
commit;
delete from dataset_access_types where dataset_access_type='INVALID';
commit;

select 'Done update DATASET' from dual;
select sysdate from dual;


INSERT INTO DATASET_PARENTS(THIS_DATASET_ID, PARENT_DATASET_ID)
SELECT  DSP.THISDATASET, DSP.ITSPARENT FROM CMS_DBS3_PROD.PROCDSPARENT DSP;

commit;
select 'Done inser DATASET_PARENTS' from dual;
select sysdate from dual;

--need to rethink YG
INSERT INTO DATASET_OUTPUT_MOD_CONFIGS(DS_OUTPUT_MOD_CONF_ID, DATASET_ID, OUTPUT_MOD_CONFIG_ID)
SELECT PA.ID, PA.DATASET, PA.ALGORITHM FROM CMS_DBS3_PROD.PROCALGO PA;

commit;
select ' Done insert DATASET_OUTPUT_MOD_CONFIGS' from dual;
select sysdate from dual;

--How about last modifcation by YG
INSERT INTO BLOCKS
(
  BLOCK_ID,                                 
   BLOCK_NAME,
    DATASET_ID,
     OPEN_FOR_WRITING, 
      BLOCK_SIZE,
       FILE_COUNT,
        CREATION_DATE,
	 CREATE_BY,
	  LAST_MODIFICATION_DATE,
	  LAST_MODIFIED_BY,	
	   ORIGIN_SITE_NAME
	  )
SELECT B.ID, B.NAME, B.DATASET, B.OPENFORWRITING, 
              B.BLOCKSIZE, B.NUMBEROFFILES, B.CREATIONDATE,
	             PDCB.DISTINGUISHEDNAME, B.LASTMODIFICATIONDATE,
		     PDCB2.DISTINGUISHEDNAME, 'UNKNOWN'
		     FROM CMS_DBS3_PROD.BLOCK B
		     LEFT OUTER JOIN CMS_DBS3_PROD.PERSON PDCB
		         ON B.CREATEDBY=PDCB.ID
		     LEFT OUTER JOIN CMS_DBS3_PROD.PERSON PDCB2
                         ON B.LASTMODIFIEDBY=PDCB2.ID;	

commit;
select 'Done insert BLOCKS' from dual;
select sysdate from dual;

INSERT into BLOCK_PARENTS(THIS_BLOCK_ID, PARENT_BLOCK_ID)
SELECT BP.THISBLOCK, BP.ITSPARENT FROM CMS_DBS3_PROD.BLOCKPARENT BP; 
commit;
select 'Done insert BLOCKS_PARENTS' from dual;
select sysdate from dual;

INSERT INTO FILE_DATA_TYPES ( FILE_TYPE_ID,  FILE_TYPE ) SELECT ID, TYPE FROM CMS_DBS3_PROD.FILETYPE;
commit;
select 'Done insert FILE_DATA_TYPES' from dual;
select sysdate from dual;


INSERT INTO FILES
(
  FILE_ID,
   LOGICAL_FILE_NAME,
    IS_FILE_VALID,
     DATASET_ID,
      BLOCK_ID,
       FILE_TYPE_ID,
        CHECK_SUM,
	 EVENT_COUNT,
	  FILE_SIZE,
	   ADLER32,
	    MD5,
	     AUTO_CROSS_SECTION,
	      CREATION_DATE,
	       CREATE_BY,
	        LAST_MODIFICATION_DATE,
		 LAST_MODIFIED_BY
		 )
SELECT F.ID, F.LOGICALFILENAME, F.VALIDATIONSTATUS, F.DATASET, F.BLOCK,
       F.FILETYPE, F.CHECKSUM, F.NUMBEROFEVENTS, F.FILESIZE, F.ADLER32,
       F.MD5, F.AUTOCROSSSECTION, F.CREATIONDATE,
       PDCB.DISTINGUISHEDNAME, F.LASTMODIFICATIONDATE, PDLM.DISTINGUISHEDNAME
       FROM CMS_DBS3_PROD.FILES F
       LEFT OUTER JOIN CMS_DBS3_PROD.PERSON PDCB
           ON F.CREATEDBY=PDCB.ID
	   LEFT OUTER JOIN CMS_DBS3_PROD.PERSON PDLM
	       ON F.LASTMODIFIEDBY=PDLM.ID;
commit;
select 'Done insert FILES' from dual;
select sysdate from dual;

INSERT INTO FILE_PARENTS(THIS_FILE_ID, PARENT_FILE_ID)
SELECT FP.THISFILE, FP.ITSPARENT FROM CMS_DBS3_PROD.FILEPARENTAGE FP;
commit;
select 'Done insert FILE_PARENTS' from dual;
select sysdate from dual;

ALTER TABLE FILE_LUMIS DROP PRIMARY KEY;
ALTER TABLE FILE_LUMIS DROP constraint TUC_FLM_1;
ALTER TABLE FILE_LUMIS DROP constraint FL_FLM;
DROP index IDX_FLM_1;

INSERT /*+ append */ INTO FILE_LUMIS(FILE_LUMI_ID, RUN_NUM, LUMI_SECTION_NUM, FILE_ID)
SELECT FRL.ID, FRL.RUN, FRL.LUMI, FRL.FILEID FROM CMS_DBS3_PROD.FILERUNLUMI FRL;
commit;
select 'Done insert FILE_LUMIS' from dual;
select sysdate from dual;

ALTER TABLE FILE_LUMIS ADD (
  CONSTRAINT FL_FLM
 FOREIGN KEY (FILE_ID)
 REFERENCES FILES (FILE_ID)
    ON DELETE CASCADE);

CREATE INDEX IDX_FLM_1 ON FILE_LUMIS
(FILE_ID);


ALTER TABLE FILE_LUMIS ADD (
  CONSTRAINT PK_FLM
 PRIMARY KEY
 (FILE_LUMI_ID)
    USING INDEX
    ,
  CONSTRAINT TUC_FLM_1
 UNIQUE (RUN_NUM, LUMI_SECTION_NUM, FILE_ID)
    USING INDEX
    );
select 'Done recreate  FILE_LUMIS constraint' from dual;
select sysdate from dual;

ALTER TABLE FILE_OUTPUT_MOD_CONFIGS DROP PRIMARY KEY;
ALTER TABLE FILE_OUTPUT_MOD_CONFIGS DROP constraint TUC_FC_1;
ALTER TABLE FILE_OUTPUT_MOD_CONFIGS DROP constraint FL_FC ;
ALTER TABLE FILE_OUTPUT_MOD_CONFIGS DROP constraint OMC_FC;
DROP index IDX_FC_1;
DROP index IDX_FC_2;
INSERT /*+ append */ INTO FILE_OUTPUT_MOD_CONFIGS(FILE_OUTPUT_CONFIG_ID, FILE_ID, OUTPUT_MOD_CONFIG_ID)
SELECT FA.ID, FA.FILEID, FA.ALGORITHM FROM CMS_DBS3_PROD.FILEALGO FA;
commit;
select 'Done insert FILE_OUPTU_MOD_CONFIGS' from dual;
select sysdate from dual;
CREATE INDEX IDX_FC_1 ON FILE_OUTPUT_MOD_CONFIGS(FILE_ID);
CREATE INDEX IDX_FC_2 ON FILE_OUTPUT_MOD_CONFIGS(OUTPUT_MOD_CONFIG_ID);
ALTER TABLE FILE_OUTPUT_MOD_CONFIGS ADD (
  CONSTRAINT PK_FC
 PRIMARY KEY
 (FILE_OUTPUT_CONFIG_ID)
    USING INDEX ,
  CONSTRAINT TUC_FC_1
 UNIQUE (FILE_ID, OUTPUT_MOD_CONFIG_ID)
    USING INDEX );

ALTER TABLE FILE_OUTPUT_MOD_CONFIGS ADD (
  CONSTRAINT FL_FC
 FOREIGN KEY (FILE_ID)
 REFERENCES FILES (FILE_ID)
    ON DELETE CASCADE,
  CONSTRAINT OMC_FC
 FOREIGN KEY (OUTPUT_MOD_CONFIG_ID)
 REFERENCES OUTPUT_MODULE_CONFIGS (OUTPUT_MOD_CONFIG_ID)
    ON DELETE CASCADE);

select 'Done recreate  FILE_OUTPUT_MOD_CONFIGS constraint' from dual;
select sysdate from dual;

spool off;
